package com.winhtaikaung.devweekly.article

import android.support.v7.app.AppCompatActivity
import android.os.Bundle
import android.util.Log
import android.webkit.WebChromeClient
import android.webkit.WebView
import android.webkit.WebViewClient
import com.winhtaikaung.devweekly.R

class ArticleDetailActivity : AppCompatActivity() {

    private var articleWebView:WebView? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_article_detail)


        articleWebView = findViewById(R.id.articleWebView)
        var html = "<div id='content'><div id='page_reader' class='wrapper wrapper_full articleview font-serif fontsize-3 fontserifsize-3 active content-article'><div class='reader_content_wrapper' style='display: block;'><div class='reader_content'><div class='reader_head clearfix'><h1 style='border-bottom: 1px solid #67676733;padding-bottom: 0.5em;margin-bottom: 0.5em;'>Kripton Persistence Library - An introduction</h1><ul class='sub'><li class='authorsdomain'><span class='authors'><span class='author'></span></span> <span class='domain'><a target='_blank' href='https://medium.com/@xcesco/kripton-persistence-library-an-introduction-326498457a57'>(medium.com)</a></span></li><li class='original'> <a target='_blank' rel='nofollow noopener noreferrer' href='https://medium.com/@xcesco/kripton-persistence-library-an-introduction-326498457a57'>Kripton Persistence Library - An introduction - Francesco Benincasa - Medium</a></li><li class='tags hasTags'> <span class='tag_container'></span></li><li class='original_narrow'><a target='_blank' rel='nofollow noopener noreferrer' href='https://medium.com/@xcesco/kripton-persistence-library-an-introduction-326498457a57'>Kripton Persistence Library - An introduction - Francesco Benincasa - Medium</a></li></ul></div><div class='text_body'><div><div><div class='section-inner sectionLayout--insetColumn'><h1 name='a35c' id='a35c' class='graf graf--h3 graf--leading graf--title'>Kripton Persistence Library?—?An introduction</h1><h2 name='6821' id='6821' class='graf graf--h4 graf-after--h3 graf--subtitle'>An open source library to simplify persistence on Android platform on SQLite, Shared-Preferences, file system (and REST client)</h2><figure name='5058' id='5058' class='graf graf--figure graf-after--h4'><figcaption class='imageCaption'>Kripton logo</figcaption></figure><p name='72ad' id='72ad' class='graf graf--p graf-after--figure'>It was the 2015, and i was working on an Android project. The tasks that application need to accomplish were always the same: get some data from REST Web services, store data locally, manage user’s preferences, display data and so on. I began to separate persistence code in a little library and then.. <strong class='markup--strong markup--p-strong'>Kripton Persistence Library</strong> was born!</p><p name='80a6' id='80a6' class='graf graf--p graf-after--p'>I write Kripton Library to simplify tasks about persist data on Android platform. First of all… what I mean with “persist”? The answer is:</p><ul class='postList'><li name='941f' id='941f' class='graf graf--li graf-after--p'>on file system as a file</li><li name='b823' id='b823' class='graf graf--li graf-after--li'>in a SQLite database</li><li name='d32b' id='d32b' class='graf graf--li graf-after--li'>in a SharedPreferences</li><li name='b57b' id='b57b' class='graf graf--li graf-after--li'>remotely with REST services</li></ul><p name='8efd' id='8efd' class='graf graf--p graf-after--li'>There are many other open source library to accomplish these tasks, but my goal was to simplify my life as developer, creating a library that allow to accomplish this task in a simply and uniform way… and with performance in mind.</p><p name='bd3c' id='bd3c' class='graf graf--p graf-after--p'>I didn’t reinvent the wheel, Kripton is based on many great libraries like <a href='https://github.com/FasterXML/jackson/' data-href='https://github.com/FasterXML/jackson/' class='markup--anchor markup--p-anchor' rel='nofollow noopener' target='_blank'>Jackson</a> for data format conversion, <a href='https://github.com/square/javapoet' data-href='https://github.com/square/javapoet' class='markup--anchor markup--p-anchor' rel='nofollow noopener' target='_blank'>Java poet</a>, <a href='http://xmlpull.org/' data-href='http://xmlpull.org/' class='markup--anchor markup--p-anchor' rel='nofollow noopener' target='_blank'>Xml pull parsing</a>, <a href='http://www.antlr.org/' data-href='http://www.antlr.org/' class='markup--anchor markup--p-anchor' rel='nofollow noopener' target='_blank'>Antlr</a> and many others.</p><p name='a491' id='a491' class='graf graf--p graf-after--p'>To work with REST service i simply wrote an integration library between Kripton with Retrofit.</p><p name='3b93' id='3b93' class='graf graf--p graf-after--p'>As you know, <em class='markup--em markup--p-em'>reflection </em>is bad thing if we talk about performance on Android Platform. This is the reason for which Kripton is heavily based on annotation processors that works at compile time an write for us the boilerplate code need to persist data.</p><p name='0577' id='0577' class='graf graf--p graf-after--p'>Ok, now it’s time to show how Kripton works.</p><h3 name='3cdd' id='3cdd' class='graf graf--h3 graf-after--p'>Setup</h3><p name='ed18' id='ed18' class='graf graf--p graf-after--h3'>To configure Kripton on an gradle project, you have to include these lines in you project’s dependencies:</p><pre name='917a' id='917a' class='graf graf--pre graf-after--p'><code class='markup--code markup--pre-code'>dependencies {<br/>    ...<br/>    // annotation processors<br/>    annotationProcessor'com.abubusoft:kripton-processor:3.5.0'<br/>    ...<br/>    // dependencies<br/>    implementation 'com.abubusoft:kripton-android-library:3.5.0'<br/>    implementation 'com.abubusoft:kripton-retrofit-converter:3.5.0'<br/>    ...<br/>}</code></pre><p name='0527' id='0527' class='graf graf--p graf-after--pre'>The Kripton-processor is the artifact that contains annotation processors. Kripton-android-libray contains core classes and references to all-you-need to execute the generated code. Kripton-retrofit-converter is the Retrofit integration (if you don’t need REST service, you don’t have to include it).</p><h3 name='f99a' id='f99a' class='graf graf--h3 graf-after--p'>Persistence on file system</h3><p name='cbc4' id='cbc4' class='graf graf--p graf-after--h3'>Just image that in your application you have to manage a <em class='markup--em markup--p-em'>Person </em>object. You simply need to persist on a file, just to reload the data in a second time. We define the Person class in this way:</p><pre name='c912' id='c912' class='graf graf--pre graf-after--p'>@BindType<br/>public class Person{<br/>    public String name;<br/>    public String surname;<br/>    public String email;<br/>    public Date birthDate;<br/>}</pre><p name='c884' id='c884' class='graf graf--p graf-after--pre'>When you compile your project, Kripton annotation processor will find Person class marked with <em class='markup--em markup--p-em'>@BindType</em> annotation and will generate all the needed code for us. So, in your code to persist a Person’s instance you can simply write:</p><pre name='4099' id='4099' class='graf graf--pre graf-after--p'>// define the Person object<br/>Person bean = new Person();<br/>bean.name = 'name';<br/>bean.surname = 'sunrame';<br/>bean.birthday = new Date();</pre><pre name='859d' id='859d' class='graf graf--pre graf-after--pre'>// get the persistence context<br/>BinderContext context = KriptonBinder.jsonBind();</pre><pre name='7789' id='7789' class='graf graf--pre graf-after--pre'>// persist on a file<br/>context.serialize(person, new File(..));</pre><p name='1f83' id='1f83' class='graf graf--p graf-after--pre'>To read from a file data and convert it in a <em class='markup--em markup--p-em'>Person </em>instance</p><pre name='0215' id='0215' class='graf graf--pre graf-after--p'>// get the persistence context<br/>BinderContext context = KriptonBinder.jsonBind();</pre><pre name='bc20' id='bc20' class='graf graf--pre graf-after--pre'>// read from a file<br/>Person person=context.parse(new File(..), Person.class);</pre><p name='0656' id='0656' class='graf graf--p graf-after--pre'>The conversion is based on code that Kripton write for us during compile time. The data format used in this case is JSON, but you can also use other data format like CBOR, YAML, XML and (Java) Properties. In our example we used <em class='markup--em markup--p-em'>String </em>and <em class='markup--em markup--p-em'>Date</em> type. <strong class='markup--strong markup--p-strong'>Kripton </strong>supports many attribute type like: primitive type, collections, arrays, maps and so on. Moreover, it’s possible to extends set of supported type with TypeAdapters.</p><p name='332c' id='332c' class='graf graf--p graf-after--p'>For more information about these features you can visit <a href='https://github.com/xcesco/kripton/wiki/' data-href='https://github.com/xcesco/kripton/wiki/' class='markup--anchor markup--p-anchor' rel='nofollow noopener' target='_blank'>Kripton wiki </a>.</p><h3 name='3de9' id='3de9' class='graf graf--h3 graf-after--p'>Persistence on SQLite database</h3><p name='5bd6' id='5bd6' class='graf graf--p graf-after--h3'>This is the persistence mechanism on which i worked a lot. You probably know that manage SQLite database on Android application is very very boring task. If you don’t know this, please read the <a href='https://developer.android.com/training/data-storage/sqlite.html' data-href='https://developer.android.com/training/data-storage/sqlite.html' class='markup--anchor markup--p-anchor' rel='nofollow noopener' target='_blank'>official documentation</a>. I used the <a href='https://www.tutorialspoint.com/design_pattern/data_access_object_pattern.htm' data-href='https://www.tutorialspoint.com/design_pattern/data_access_object_pattern.htm' class='markup--anchor markup--p-anchor' rel='nofollow noopener' target='_blank'>DAO pattern</a> to approach at the database management. In the DAO pattern we can found:</p><ul class='postList'><li name='9b54' id='9b54' class='graf graf--li graf-after--p'>A data model composed by simple POJO objects in Java world, and tables in SQLite world.</li><li name='e4fe' id='e4fe' class='graf graf--li graf-after--li'>Data Access Object interfaces that define how to access to database</li><li name='6984' id='6984' class='graf graf--li graf-after--li'>Data Access Object implementation that implements the DAO interfaces</li><li name='f997' id='f997' class='graf graf--li graf-after--li'>A database that is composed by DAOs and data model.</li></ul><p name='200e' id='200e' class='graf graf--p graf-after--li'>Kripton need the developer defines the data model with <strong class='markup--strong markup--p-strong'>BindTable</strong> annotated java classes, the DAO’s interfaces with <strong class='markup--strong markup--p-strong'>BindDao</strong> annotated Java interface and a data source (the database) by an <strong class='markup--strong markup--p-strong'>BindDataSource</strong> annotated Java interface. At compile time, Kripton will generate all needed code to implements DAO interfaces and to manage data source.</p><p name='77c6' id='77c6' class='graf graf--p graf-after--p'>We can take the previous Person example to see how define a SQLite database with a <em class='markup--em markup--p-em'>persons</em> table, and a DAO interface with some methods to do CRUD operations (Create Read Update Delete). The data model is rapresented by Person class:</p><pre name='de1e' id='de1e' class='graf graf--pre graf-after--p'>@BindTable(name='persons')<br/>public class Person{<br/>  public long id;<br/>  public String name;<br/>  public String surname;<br/>  public String email;<br/>  public Date birthDate;<br/>}</pre><p name='6a57' id='6a57' class='graf graf--p graf-after--pre'>Just two things:</p><ul class='postList'><li name='d085' id='d085' class='graf graf--li graf-after--p'>every SQLite table need a <em class='markup--em markup--li-em'>id </em>column of type <em class='markup--em markup--li-em'>Long </em>or <em class='markup--em markup--li-em'>long</em>. It’s a constraint that Kripton required for every table and it is a best practice for SQLite databases.</li><li name='ce92' id='ce92' class='graf graf--li graf-after--li'><strong class='markup--strong markup--li-strong'>BindTable </strong>is the annotation used to mark a data model that will be used in a SQLite database.</li></ul><p name='27d6' id='27d6' class='graf graf--p graf-after--li'>The DAO interface definition is:</p><pre name='4cec' id='4cec' class='graf graf--pre graf-after--p'>@BindContentProviderPath(path = 'persons')<br/>@BindDao(Person.class)<br/>public interface PersonDao {</pre><pre name='cb28' id='cb28' class='graf graf--pre graf-after--pre'>  @BindContentProviderEntry<br/>  @BindSqlSelect(orderBy='name')<br/>  List&lt;Person&gt; selectAll();</pre><pre name='7637' id='7637' class='graf graf--pre graf-after--pre'>  @BindSqlSelect(jql='select * from person order by name')<br/>  List&lt;Person&gt; selectTwo();</pre><pre name='258a' id='258a' class='graf graf--pre graf-after--pre'>  @BindSqlSelect()<br/>  List&lt;Person&gt; selectThree(@BindSqlDynamicOrderBy String orderBy);</pre><pre name='3333' id='3333' class='graf graf--pre graf-after--pre'>  @BindSqlSelect(where = 'id=&#36;{work.id}')<br/>  List&lt;E&gt; selectById(@BindSqlParam('work') E bean);</pre><pre name='1d91' id='1d91' class='graf graf--pre graf-after--pre'>  @BindContentProviderEntry<br/>  @BindSqlInsert<br/>  void insert(Person bean);</pre><pre name='0baa' id='0baa' class='graf graf--pre graf-after--pre'>  @BindContentProviderEntry  <br/>  @BindSqlUpdate(where = 'id=&#36;{work.id}')<br/>  boolean update(@BindSqlParam('work') Person bean);<br/>  <br/>  @BindContentProviderEntry  <br/>  @BindSqlDelete(where = 'id=&#36;{work.id}')<br/>  boolean delete(@BindSqlParam('work') Person bean);<br/>}</pre><p name='e654' id='e654' class='graf graf--p graf-after--pre'>And the data source definition is:</p><pre name='83ea' id='83ea' class='graf graf--pre graf-after--p'>@BindContentProvider(authority='com.abubusoft.kripton')<br/>@BindDataSource(daoSet= { PersonDao.class }, fileName = 'person.db', log=true)<br/>public interface PersonDataSource {<br/>}</pre><p name='31da' id='31da' class='graf graf--p graf-after--pre'>When the project is compiled, <em class='markup--em markup--p-em'>Kripton annotation processor</em> will generate for us the code that implements the data source defined by the data model, the DAO and datasource interfaces.</p><p name='526a' id='526a' class='graf graf--p graf-after--p'>The need annotations to define a data source with Kripton is:</p><ul class='postList'><li name='c89a' id='c89a' class='graf graf--li graf-after--p'><strong class='markup--strong markup--li-strong'>BindDataSource</strong>: defines a datasource</li><li name='c5f2' id='c5f2' class='graf graf--li graf-after--li'><strong class='markup--strong markup--li-strong'>BindDao</strong>: define the DAO interface</li><li name='5ba8' id='5ba8' class='graf graf--li graf-after--li'><strong class='markup--strong markup--li-strong'>BindTable</strong>: associate a class to a table</li><li name='3e0b' id='3e0b' class='graf graf--li graf-after--li'><strong class='markup--strong markup--li-strong'>BindInsert|Update|Select|Delete</strong>: defines SQL to manage tables</li></ul><p name='4ddd' id='4ddd' class='graf graf--p graf-after--li'>As you notice in the source code there are other used annotations, needed if you want to generate a Content Provider too:</p><ul class='postList'><li name='411f' id='411f' class='graf graf--li graf-after--p'><strong class='markup--strong markup--li-strong'>BindContentProvider</strong>: allows to generate a content provider</li><li name='5c8f' id='5c8f' class='graf graf--li graf-after--li'><strong class='markup--strong markup--li-strong'>BindContentProviderPath</strong>: include DAO in the content provider definition</li><li name='40aa' id='40aa' class='graf graf--li graf-after--li'><strong class='markup--strong markup--li-strong'>BindContentProviderEntry</strong>: include DAO’s method in the content provider definition</li></ul><p name='2f12' id='2f12' class='graf graf--p graf-after--li'>Yes, given a data source definition, Kripton can generate a content provider just with a couple of extra annotations. In your application, to use generated implementation of datasource you can use code like this:</p><pre name='785a' id='785a' class='graf graf--pre graf-after--p'>// typically Kripton library is done in Application#onCreate<br/>KriptonLibrary.init(context);</pre><pre name='a0ef' id='a0ef' class='graf graf--pre graf-after--pre'>// usage example 1: open data source and insert somedata<br/>try (BindPersonDataSource dataSource = BindPersonDataSource.open())<br/>{<br/>  dataSource.getPersonDAO().insert(person);<br/>}</pre><pre name='b428' id='b428' class='graf graf--pre graf-after--pre'>// usage example 2: using transaction<br/>BindPersonDataSource.<em class='markup--em markup--pre-em'>instance</em>().execute(daoFactory -&gt; {<br/>    PersonDao dao=daoFactory.getPersonDao();<br/>    dao.insert(person);<br/>    ...<br/>    return TransactionResult.COMMIT;<br/>});</pre><pre name='0bf0' id='0bf0' class='graf graf--pre graf-after--pre'>// usage example 3: using shared connection<br/>BindPersonDataSource.<em class='markup--em markup--pre-em'>instance</em>().executeBatch(daoFactory -&gt; {<br/>    PersonDao dao=daoFactory.getPersonDao();<br/>    dao.selectAll();<br/>    ...<br/><br/>});</pre><p name='c772' id='c772' class='graf graf--p graf-after--pre'>For a <strong class='markup--strong markup--p-strong'>PersonDataSource </strong>interface, Kripton generate a <strong class='markup--strong markup--p-strong'>BindPersonDataSource </strong>class that implements the datasource which allows to work in a thread-safe way and exposing all DAO defined in <strong class='markup--strong markup--p-strong'>PersonDataSource </strong>interface. The generated datasource exposes some methods to work in a transation mode and in shared connection mode. You can see an <a href='https://github.com/xcesco/kripton/blob/master/KriptonAndroidLibrary/src/test/java/sqlite/feature/contentprovider/kripton35/persistence/PersonDAOImpl.java' data-href='https://github.com/xcesco/kripton/blob/master/KriptonAndroidLibrary/src/test/java/sqlite/feature/contentprovider/kripton35/persistence/PersonDAOImpl.java' class='markup--anchor markup--p-anchor' rel='nofollow noopener' target='_blank'>example of generated DAO implementation</a> and of <a href='https://github.com/xcesco/kripton/blob/master/KriptonAndroidLibrary/src/test/java/sqlite/feature/contentprovider/kripton35/persistence/BindPersonDataSource.java' data-href='https://github.com/xcesco/kripton/blob/master/KriptonAndroidLibrary/src/test/java/sqlite/feature/contentprovider/kripton35/persistence/BindPersonDataSource.java' class='markup--anchor markup--p-anchor' rel='nofollow noopener' target='_blank'>generated Data Source implementation</a>. As you can observe from source code, all generated classes are well documented!</p><p name='a39d' id='a39d' class='graf graf--p graf-after--p'>There are other features that i want to mention: the capability to generate log of SQL operation, the capability to support RX library and the capability to test database version migration with helper classes.</p><h3 name='b735' id='b735' class='graf graf--h3 graf-after--p'>Persistence with SharePreferences</h3><p name='8daf' id='8daf' class='graf graf--p graf-after--h3'>Shared Preferences is another standard way to persists data on Android Platform. In almost all the case, they are used to manage user’s application settings. Kripton allow to generate a Shared Preferences wrapper that allow to access to settings properties in a strong type way. Just an example: suppose to rapresents the application’s setting with the <strong class='markup--strong markup--p-strong'>AppPreferences </strong>class:</p><pre name='e8c6' id='e8c6' class='graf graf--pre graf-after--p'>@BindSharedPreferences<br/>public class AppPreferences {<br/>  public float valueFloat=5.0f;</pre><pre name='fd86' id='fd86' class='graf graf--pre graf-after--pre'>  @BindPreference(“value”)<br/>  public boolean valueBoolean;<br/>}</pre><p name='52f7' id='52f7' class='graf graf--p graf-after--pre'>With <strong class='markup--strong markup--p-strong'>BindSharedPreferences </strong>annotation,Kripton will generate a class named <strong class='markup--strong markup--p-strong'>BindAppPreferences</strong>:</p><figure name='3160' id='3160' class='graf graf--figure graf-after--p'><figcaption class='imageCaption'>Generated SharedPreference wrapper class for AppPreferences class</figcaption></figure><p name='59e7' id='59e7' class='graf graf--p graf-after--figure'>So if you want to read or write properties from SharedPreference in the application, you can write:</p><pre name='cdc1' id='cdc1' class='graf graf--pre graf-after--p'>// get Shared Preference instance<br/>BindAppPreferences prefs = BindAppPreferences.instance();</pre><pre name='27dc' id='27dc' class='graf graf--pre graf-after--pre'>// read the value of valueBoolean property<br/>...=prefs.valueBoolean();</pre><pre name='356d' id='356d' class='graf graf--pre graf-after--pre'>// write the value of valueBoolean property<br/>prefs.edit().putValueBoolean(true).commit();</pre><p name='7a7a' id='7a7a' class='graf graf--p graf-after--pre'>You can use String, primitive types, List, Map, Sets or other object as SharedPreference’s attributes. The complex type will be converted in its JSON rapresentation.</p><h3 name='a134' id='a134' class='graf graf--h3 graf-after--p'>Persistence with REST Web service</h3><p name='7476' id='7476' class='graf graf--p graf-after--h3'>Last but not least persistence type covered by Kripton is the one which use REST service. There are many library that permits to generate REST service client easily. The one that I prefer is Retrofit.</p><p name='3b0e' id='3b0e' class='graf graf--p graf-after--p'>So, I decide to integrate Kripton with Retrofit, just to use Kripton persistence mechanism in <a href='http://square.github.io/retrofit/' data-href='http://square.github.io/retrofit/' class='markup--anchor markup--p-anchor' rel='nofollow noopener' target='_blank'>Retrofit </a>library. I want to show you here how simple is to work with them.</p><p name='0b26' id='0b26' class='graf graf--p graf-after--p'>For example we want to consune the REST service at</p><p name='9adc' id='9adc' class='graf graf--p graf-after--p'><a href='https://jsonplaceholder.typicode.com/posts/' data-href='https://jsonplaceholder.typicode.com/posts/' class='markup--anchor markup--p-anchor' rel='nofollow noopener' target='_blank'>https://jsonplaceholder.typicode.com/posts/</a></p><p name='8bbf' id='8bbf' class='graf graf--p graf-after--p'>So we define a <strong class='markup--strong markup--p-strong'>Post</strong> class with Kripton <strong class='markup--strong markup--p-strong'>BindType</strong> annotation</p><pre name='bf96' id='bf96' class='graf graf--pre graf-after--p'>@BindType<br/>public class Post {<br/>  public long userId;<br/>  public long id;<br/>  public String title;<br/>  public String body;<br/>}</pre><p name='035a' id='035a' class='graf graf--p graf-after--pre'>And the we can define the REST client interface:</p><pre name='bad3' id='bad3' class='graf graf--pre graf-after--p'>public interface JsonPlaceHolderService {<br/>  @POST(“/posts/”)<br/>  Call&lt;List&lt;Post&gt;&gt; getAllPost();<br/>}</pre><p name='8c8e' id='8c8e' class='graf graf--p graf-after--pre'>The code to consume the REST service is:</p><pre name='f0ec' id='f0ec' class='graf graf--pre graf-after--p'>// create retrofit using Kripton converter factory<br/>Retrofit retrofit = new Retrofit.Builder()<br/>  .baseUrl(“https://jsonplaceholder.typicode.com/')<br/>  .addConverterFactory(KriptonBinderConverterFactory.create())<br/>  .build();</pre><pre name='ba8c' id='ba8c' class='graf graf--pre graf-after--pre'>JsonPlaceHolderService service = Retrofit.create(JsonPlaceHolderService.class);</pre><pre name='2316' id='2316' class='graf graf--pre graf-after--pre'>// consume service<br/>Response&lt;List&lt;Post&gt;&gt; response = service.getAllPost().execute();</pre><p name='18f5' id='18f5' class='graf graf--p graf-after--pre'>The integration between Kripton and Retrofi is done by <strong class='markup--strong markup--p-strong'>KriptonBinderConverterFactory </strong>converter.</p><h3 name='6c6c' id='6c6c' class='graf graf--h3 graf-after--p'>Conclusion</h3><p name='56b0' id='56b0' class='graf graf--p graf-after--h3'>This post was only an introduction on Kripton Persistence Library. It’s a powerfull library that can help development on Android Platform.</p><p name='1820' id='1820' class='graf graf--p graf-after--p'>If you like Kripton, give it a star on github, thank you.</p><p name='2564' id='2564' class='graf graf--p graf-after--p'>You can found <a href='https://github.com/xcesco/kripton' data-href='https://github.com/xcesco/kripton' class='markup--anchor markup--p-anchor' rel='nofollow noopener' target='_blank'>Kripton Persistence Library on github</a>. Moreover, you can consult my blob <a href='http://www.abubusoft.com' data-href='http://www.abubusoft.com' class='markup--anchor markup--p-anchor' rel='nofollow noopener' target='_blank'>Abubusoft.com</a>.</p><p name='ddd3' id='ddd3' class='graf graf--p graf-after--p'>Happy Coding</p><p name='3ebc' id='3ebc' class='graf graf--p graf-after--p graf--trailing'>Francesco Benincasa</p></div></div></div></div></div></div></div></div>"


        val articleHeaderTemplate = assets.open("article_header.html")


        val headerSize = articleHeaderTemplate.available()


        val buffer = ByteArray(headerSize)

        articleHeaderTemplate.read(buffer)
        articleHeaderTemplate.close()

        val articleFooterTemplate = assets.open("article_footer.html")
        val footerSize = articleFooterTemplate.available()
        val footerBuffer = ByteArray(footerSize)
        articleFooterTemplate.read(footerBuffer)
        articleFooterTemplate.close()

        var headerStr = String(buffer)
        var footerStr = String(footerBuffer)
        articleWebView?.webViewClient = WebViewClient()
        articleWebView?.webChromeClient = WebChromeClient()
        articleWebView?.settings?.javaScriptEnabled=true
        articleWebView?.loadData(headerStr+html+footerStr,"text/html; charset=utf-8", "UTF-8")
    }
}
